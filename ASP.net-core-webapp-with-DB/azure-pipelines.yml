trigger: 
 branches:
   include:
     - main
   
variables:
  BuildConfiguration: release
  azureSubscription: 'dotnet'
  webAppName: 'dotnet-mv'
  vmImageName: 'ubuntu-latest'
  
stages:
- stage: Build
  displayName: Install and Build artifacts
  jobs: 
  - job: buildArtifacts
    displayName: Build artifacts
    steps:
    - task: UseDotNet@2
      displayName: Install .NET 6 sdk
      inputs:
        packageType: sdk
        version: 6.0.x
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreCLI@2
      displayName: Restore Nuget Packages
      inputs:
       command: restore
       projects: '**/WebApp.csproj'

    - task: DotNetCoreCLI@2
      displayName: Build Web App
      inputs:
        projects: '**/WebApp.csproj'
        arguments: '--configuration $(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests
      inputs:
        command: test
        projects: '**/*UnitTest*.csproj'
        arguments: '--configuration $(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: Create Web App Package (.zip)
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
        zipAfterPublish: True

    - task: SonarCloudPrepare@1
      displayName: Prepare Sonar cloud analysis
      inputs:
        SonarCloud: 'sonarr'
        organization: 'ravirajput'
        scannerMode: 'MSBuild'
        projectKey: 'ravirajput_ASP.net-webapp-with-DB'
        projectName: 'ASP.net webapp with DB'
    
    - task: SonarCloudAnalyze@1
      displayName: 'Run Code Analysis on SonarCloud' 
    
    - task: SonarCloudPublish@1
      displayName: 'Publish Quality Gate Result on SonarCloud'
      inputs:
        pollingTimeoutSec: '300'

    - task: PublishPipelineArtifact@0
      displayName: 'Publish pipeline artifacts'
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)
        artifactName: 'Webapp'

- stage: Deploy
  displayName: Deployment
  dependsOn: Build
  condition: succeeded()
  jobs: 
  - deployment: DeployLinuxWebApp
    displayName: Deploy Linux Web App
    environment: 'development'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              artifactName: 'Webapp'
              targetPath: $(System.ArtifactsDirectory)
          
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: $(webAppName)-webapp'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              appName: $(webAppName)
              package: '$(System.ArtifactsDirectory)/*.zip'
  
